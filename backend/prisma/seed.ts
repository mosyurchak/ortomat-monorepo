import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting seed...');

  const hashedPassword = await bcrypt.hash('password123', 10);

  const admin = await prisma.user.upsert({
    where: { email: 'admin@ortomat.ua' },
    update: {},
    create: {
      email: 'admin@ortomat.ua',
      password: hashedPassword,
      role: 'ADMIN',
      firstName: '–ê–¥–º—ñ–Ω',
      lastName: '–°–∏—Å—Ç–µ–º–∏',
      phone: '+380501234567',
      isVerified: true,
    },
  });

  const doctor = await prisma.user.upsert({
    where: { email: 'doctor@ortomat.ua' },
    update: {},
    create: {
      email: 'doctor@ortomat.ua',
      password: hashedPassword,
      role: 'DOCTOR',
      firstName: '–û–ª–µ–Ω–∞',
      lastName: '–Ü–≤–∞–Ω–æ–≤–∞',
      middleName: '–ü–µ—Ç—Ä—ñ–≤–Ω–∞',
      phone: '+380502345678',
      isVerified: true,
    },
  });

  const courier = await prisma.user.upsert({
    where: { email: 'courier@ortomat.ua' },
    update: {},
    create: {
      email: 'courier@ortomat.ua',
      password: hashedPassword,
      role: 'COURIER',
      firstName: '–ú–∏—Ö–∞–π–ª–æ',
      lastName: '–ü–µ—Ç—Ä–µ–Ω–∫–æ',
      phone: '+380503456789',
      isVerified: true,
    },
  });

  console.log('‚úÖ Users created');

  const ortomat1 = await prisma.ortomat.upsert({
    where: { id: 'ortomat-1' },
    update: {},
    create: {
      id: 'ortomat-1',
      name: '–û—Ä—Ç–æ–º–∞—Ç ‚Ññ1',
      address: '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1',
      city: '–ö–∏—ó–≤',
      totalCells: 37,
      status: 'active',
    },
  });

  const ortomat3 = await prisma.ortomat.upsert({
    where: { id: 'ortomat-3' },
    update: {},
    create: {
      id: 'ortomat-3',
      name: '–û—Ä—Ç–æ–º–∞—Ç ‚Ññ3',
      address: '–≤—É–ª. –°–æ–±–æ—Ä–Ω–∞, 5',
      city: '–ñ–∏—Ç–æ–º–∏—Ä',
      totalCells: 37,
      status: 'active',
    },
  });

  console.log('‚úÖ Ortomats created');

  await prisma.doctorOrtomat.upsert({
    where: {
      doctorId_ortomatId: {
        doctorId: doctor.id,
        ortomatId: ortomat1.id,
      },
    },
    update: {},
    create: {
      doctorId: doctor.id,
      ortomatId: ortomat1.id,
      referralCode: 'DOC001',
      commissionPercent: 10,
    },
  });

  console.log('‚úÖ Doctor-Ortomat relation created');

  await prisma.courierOrtomat.upsert({
    where: {
      courierId_ortomatId: {
        courierId: courier.id,
        ortomatId: ortomat1.id,
      },
    },
    update: {},
    create: {
      courierId: courier.id,
      ortomatId: ortomat1.id,
      status: 'active',
    },
  });

  await prisma.courierOrtomat.upsert({
    where: {
      courierId_ortomatId: {
        courierId: courier.id,
        ortomatId: ortomat3.id,
      },
    },
    update: {},
    create: {
      courierId: courier.id,
      ortomatId: ortomat3.id,
      status: 'active',
    },
  });

  console.log('‚úÖ Courier-Ortomat relations created');

  // –¢–æ–≤–∞—Ä–∏ –ë–ï–ó category
  const product1 = await prisma.product.upsert({
    where: { sku: 'COMP-SOCK-001' },
    update: {},
    create: {
      name: '–ö–æ–º–ø—Ä–µ—Å—ñ–π–Ω—ñ –ø–∞–Ω—á–æ—Ö–∏',
      sku: 'COMP-SOCK-001',
      description: '<p>–Ø–∫—ñ—Å–Ω—ñ –∫–æ–º–ø—Ä–µ—Å—ñ–π–Ω—ñ –ø–∞–Ω—á–æ—Ö–∏ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤–µ–Ω–æ–∑–Ω–æ–≥–æ –∫—Ä–æ–≤–æ–æ–±—ñ–≥—É</p>',
      size: 'M',
      price: 450,
      mainImage: 'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?w=400',
      images: ['https://images.unsplash.com/photo-1594633313593-bab3825d0caf?w=400'],
      imageUrl: 'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?w=400',
    },
  });

  const product2 = await prisma.product.upsert({
    where: { sku: 'PREG-BAND-001' },
    update: {},
    create: {
      name: '–ë–∞–Ω–¥–∞–∂ –¥–ª—è –≤–∞–≥—ñ—Ç–Ω–∏—Ö',
      sku: 'PREG-BAND-001',
      description: '<p><strong>–ü—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π –±–∞–Ω–¥–∞–∂</strong> –¥–ª—è –≤–∞–≥—ñ—Ç–Ω–∏—Ö –∂—ñ–Ω–æ–∫</p>',
      size: 'Uni',
      price: 650,
      mainImage: 'https://images.unsplash.com/photo-1555696253-13c3c18d5d1d?w=400',
      images: [],
      imageUrl: 'https://images.unsplash.com/photo-1555696253-13c3c18d5d1d?w=400',
    },
  });

  const product3 = await prisma.product.upsert({
    where: { sku: 'POST-BAND-001' },
    update: {},
    create: {
      name: '–ü—ñ—Å–ª—è–æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π –±–∞–Ω–¥–∞–∂',
      sku: 'POST-BAND-001',
      description: '<p>–ü—ñ—Å–ª—è–æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π –±–∞–Ω–¥–∞–∂ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è</p>',
      size: 'L',
      price: 850,
      mainImage: 'https://images.unsplash.com/photo-1576091160550-2173dba999ef?w=400',
      images: [],
      imageUrl: 'https://images.unsplash.com/photo-1576091160550-2173dba999ef?w=400',
    },
  });

  const product4 = await prisma.product.upsert({
    where: { sku: 'ELAS-BAND-001' },
    update: {},
    create: {
      name: '–ï–ª–∞—Å—Ç–∏—á–Ω–∏–π –±—ñ–Ω—Ç',
      sku: 'ELAS-BAND-001',
      description: '<p>–ï–ª–∞—Å—Ç–∏—á–Ω–∏–π –±—ñ–Ω—Ç –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏</p>',
      size: 'Uni',
      price: 120,
      mainImage: 'https://images.unsplash.com/photo-1584308666744-24d5c474f2ae?w=400',
      images: ['https://images.unsplash.com/photo-1587854692152-cbe660dbde88?w=400'],
      imageUrl: 'https://images.unsplash.com/photo-1584308666744-24d5c474f2ae?w=400',
    },
  });

  const product5 = await prisma.product.upsert({
    where: { sku: 'MENS-CUP-001' },
    update: {},
    create: {
      name: '–ú–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞ —á–∞—à–∞',
      sku: 'MENS-CUP-001',
      description: '<h3>–ï–∫–æ–ª–æ–≥—ñ—á–Ω–∞ –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞ —á–∞—à–∞</h3><p>–ë–∞–≥–∞—Ç–æ—Ä–∞–∑–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</p>',
      size: 'S',
      price: 350,
      mainImage: 'https://images.unsplash.com/photo-1610088441520-4352457e7095?w=400',
      images: [],
      imageUrl: 'https://images.unsplash.com/photo-1610088441520-4352457e7095?w=400',
    },
  });

  console.log('‚úÖ Products created');

  const products = [product1, product2, product3, product4, product5];

  for (let i = 1; i <= 37; i++) {
    const productIndex = i <= 5 ? i - 1 : null;
    
    await prisma.cell.upsert({
      where: {
        ortomatId_number: {
          ortomatId: ortomat1.id,
          number: i,
        },
      },
      update: {},
      create: {
        number: i,
        ortomatId: ortomat1.id,
        productId: productIndex !== null ? products[productIndex].id : null,
        isAvailable: productIndex !== null,
      },
    });
  }

  console.log('‚úÖ Cells created for Ortomat 1');

  console.log('üéâ Seed completed successfully!');
}

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });