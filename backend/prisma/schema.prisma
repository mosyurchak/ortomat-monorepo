generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(uuid())
  email                    String           @unique
  password                 String
  role                     UserRole
  firstName                String
  lastName                 String
  middleName               String?
  phone                    String
  isVerified               Boolean          @default(false)
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  emailNotifications       Boolean          @default(true)
  emailVerificationExpires DateTime?
  emailVerificationToken   String?          @unique
  lastNotificationSent     DateTime?
  resetPasswordExpires     DateTime?
  resetPasswordToken       String?          @unique
  activityLogs             ActivityLog[]
  courierOrtomats          CourierOrtomat[]
  doctorOrtomats           DoctorOrtomat[]
  emailLogs                EmailLog[]
  sales                    Sale[]

  @@map("users")
}

model Ortomat {
  id           String          @id @default(uuid())
  name         String
  address      String
  city         String?
  totalCells   Int             @default(37)
  status       String          @default("active")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  activityLogs ActivityLog[]
  cells        Cell[]
  couriers     CourierOrtomat?
  doctors      DoctorOrtomat[]
  invites      OrtomatInvite[]
  sales        Sale[]

  @@map("ortomats")
}

model Cell {
  id             String    @id @default(uuid())
  number         Int
  ortomatId      String
  productId      String?
  isAvailable    Boolean   @default(true)
  lastRefillDate DateTime?
  courierId      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  ortomat        Ortomat   @relation(fields: [ortomatId], references: [id], onDelete: Cascade)
  product        Product?  @relation(fields: [productId], references: [id])

  @@unique([ortomatId, number])
  @@map("cells")
}

model Product {
  id                 String   @id @default(uuid())
  name               String
  sku                String   @unique
  description        String?
  size               String   @default("Uni")
  price              Float
  mainImage          String?
  images             String[] @default([])
  imageUrl           String?
  color              String?
  material           String?
  manufacturer       String?
  videoUrl           String?
  termsAndConditions String?
  attributes         Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  cells              Cell[]
  sales              Sale[]

  @@map("products")
}

model DoctorOrtomat {
  id                String   @id @default(uuid())
  doctorId          String
  ortomatId         String
  referralCode      String   @unique
  qrCode            String?
  commissionPercent Float    @default(10.0)
  totalSales        Int      @default(0)
  totalEarnings     Float    @default(0.0)
  createdAt         DateTime @default(now())
  doctor            User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  ortomat           Ortomat  @relation(fields: [ortomatId], references: [id], onDelete: Cascade)
  sales             Sale[]

  @@unique([doctorId, ortomatId])
  @@map("doctor_ortomats")
}

model CourierOrtomat {
  id        String   @id @default(uuid())
  courierId String
  ortomatId String   @unique
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courier   User     @relation(fields: [courierId], references: [id], onDelete: Cascade)
  ortomat   Ortomat  @relation(fields: [ortomatId], references: [id], onDelete: Cascade)

  @@unique([courierId, ortomatId])
  @@map("courier_ortomats")
}

model Sale {
  id              String         @id @default(uuid())
  doctorId        String?
  productId       String
  ortomatId       String
  cellNumber      Int
  amount          Float
  commission      Float?
  referralCode    String?
  paymentId       String?
  status          String         @default("pending")
  createdAt       DateTime       @default(now())
  orderNumber     String?        @unique
  customerPhone   String?
  completedAt     DateTime?
  doctorOrtomatId String?
  doctor          User?          @relation(fields: [doctorId], references: [id])
  doctorOrtomat   DoctorOrtomat? @relation(fields: [doctorOrtomatId], references: [id])
  ortomat         Ortomat        @relation(fields: [ortomatId], references: [id])
  product         Product        @relation(fields: [productId], references: [id])

  @@map("sales")
}

model ActivityLog {
  id         String   @id @default(uuid())
  type       LogType
  category   String
  message    String
  metadata   Json?
  userId     String?
  ortomatId  String?
  cellNumber Int?
  severity   Severity @default(INFO)
  createdAt  DateTime @default(now())
  ortomat    Ortomat? @relation(fields: [ortomatId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@index([type])
  @@index([category])
  @@index([severity])
  @@index([createdAt])
  @@index([ortomatId])
  @@map("activity_logs")
}

model EmailLog {
  id          String      @id @default(uuid())
  userId      String?
  email       String
  type        EmailType
  subject     String
  status      EmailStatus @default(PENDING)
  error       String?
  sentAt      DateTime    @default(now())
  deliveredAt DateTime?
  openedAt    DateTime?
  metadata    Json?
  recipient   String?
  user        User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([email])
  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@map("email_logs")
}

model OrtomatInvite {
  id        String    @id @default(uuid())
  ortomatId String
  token     String    @unique
  createdBy String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  usedBy    String?
  isActive  Boolean   @default(true)
  ortomat   Ortomat   @relation(fields: [ortomatId], references: [id], onDelete: Cascade)

  @@map("ortomat_invites")
}

enum UserRole {
  ADMIN
  DOCTOR
  COURIER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  CANCELLED
}

enum OrderStatus {
  CREATED
  PAYMENT_PENDING
  PAYMENT_PROCESSING
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  CELL_OPENING
  COMPLETED
  CANCELLED
}

enum LogType {
  CELL_OPENED
  CELL_FILLED
  CELL_CLEARED
  CELL_PRODUCT_ASSIGNED
  CELL_ERROR
  ORDER_CREATED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  ORDER_COMPLETED
  ORDER_CANCELLED
  COURIER_CHECKIN
  COURIER_REFILL
  DEVICE_ONLINE
  DEVICE_OFFLINE
  API_ERROR
  WEBSOCKET_COMMAND
  LOGIN_SUCCESS
  LOGIN_FAILED
  UNAUTHORIZED_ACCESS
}

enum Severity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum EmailType {
  VERIFICATION
  WELCOME
  PASSWORD_RESET
  SALE_NOTIFICATION
  REFILL_REMINDER
  SYSTEM_ALERT
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}
