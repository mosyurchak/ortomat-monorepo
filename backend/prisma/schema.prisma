generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DOCTOR
  COURIER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  CANCELLED
}

enum OrderStatus {
  CREATED
  PAYMENT_PENDING
  PAYMENT_PROCESSING
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  CELL_OPENING
  COMPLETED
  CANCELLED
}

enum LogType {
  CELL_OPENED
  CELL_FILLED
  CELL_CLEARED
  CELL_PRODUCT_ASSIGNED
  CELL_ERROR
  ORDER_CREATED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  ORDER_COMPLETED
  ORDER_CANCELLED
  COURIER_CHECKIN
  COURIER_REFILL
  DEVICE_ONLINE
  DEVICE_OFFLINE
  API_ERROR
  WEBSOCKET_COMMAND
  LOGIN_SUCCESS
  LOGIN_FAILED
  UNAUTHORIZED_ACCESS
}

enum Severity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

// ✅ НОВИЙ ENUM
enum EmailType {
  VERIFICATION
  WELCOME
  PASSWORD_RESET
  SALE_NOTIFICATION
  REFILL_REMINDER
  SYSTEM_ALERT
}

// ✅ НОВИЙ ENUM
enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole
  firstName String
  lastName  String
  middleName String?
  phone     String
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ✅ НОВІ ПОЛЯ для email функціоналу
  emailVerificationToken String?   @unique
  emailVerificationExpires DateTime?
  
  resetPasswordToken String?       @unique
  resetPasswordExpires DateTime?
  
  emailNotifications Boolean @default(true)
  lastNotificationSent DateTime?

  doctorOrtomats DoctorOrtomat[]
  courierOrtomats CourierOrtomat[]
  sales Sale[]
  activityLogs ActivityLog[]
  emailLogs EmailLog[] // ✅ ДОДАНО

  @@map("users")
}

model Ortomat {
  id      String @id @default(uuid())
  name    String
  address String
  city    String?
  totalCells Int @default(37)
  status String @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cells Cell[]
  doctors DoctorOrtomat[]
  couriers CourierOrtomat[]
  sales Sale[]
  activityLogs ActivityLog[]

  @@map("ortomats")
}

model Cell {
  id       String @id @default(uuid())
  number   Int
  ortomatId String
  productId String?
  isAvailable Boolean @default(true)
  lastRefillDate DateTime?
  courierId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ortomat Ortomat @relation(fields: [ortomatId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  
  @@unique([ortomatId, number])
  @@map("cells")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  sku         String  @unique
  description String? @db.Text
  size        String  @default("Uni")
  price       Float
  
  mainImage   String?
  images      String[] @default([])
  
  imageUrl    String?
  color       String?
  material    String?
  manufacturer String?
  videoUrl    String?
  termsAndConditions String? @db.Text
  attributes  Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cells Cell[]
  sales Sale[]

  @@map("products")
}

model DoctorOrtomat {
  id        String @id @default(uuid())
  doctorId  String
  ortomatId String
  referralCode String @unique
  qrCode String?
  commissionPercent Float @default(10.0)
  totalSales Int @default(0)
  totalEarnings Float @default(0.0)
  createdAt DateTime @default(now())

  doctor  User    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  ortomat Ortomat @relation(fields: [ortomatId], references: [id], onDelete: Cascade)
  sales Sale[]

  @@unique([doctorId, ortomatId])
  @@map("doctor_ortomats")
}

model CourierOrtomat {
  id        String @id @default(uuid())
  courierId String
  ortomatId String
  status String @default("active")
  createdAt DateTime @default(now())

  courier User    @relation(fields: [courierId], references: [id], onDelete: Cascade)
  ortomat Ortomat @relation(fields: [ortomatId], references: [id], onDelete: Cascade)

  @@unique([courierId, ortomatId])
  @@map("courier_ortomats")
}

model Sale {
  id         String   @id @default(uuid())
  doctorId   String?
  productId  String
  ortomatId  String
  cellNumber Int
  amount     Float
  commission Float?
  referralCode String?
  paymentId  String?
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  
  orderNumber String? @unique
  customerPhone String?
  completedAt DateTime?
  doctorOrtomatId String?

  doctor  User?    @relation(fields: [doctorId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  ortomat Ortomat @relation(fields: [ortomatId], references: [id])
  doctorOrtomat DoctorOrtomat? @relation(fields: [doctorOrtomatId], references: [id])

  @@map("sales")
}

model ActivityLog {
  id          String   @id @default(uuid())
  type        LogType
  category    String
  message     String   @db.Text
  metadata    Json?
  userId      String?
  ortomatId   String?
  cellNumber  Int?
  severity    Severity @default(INFO)
  createdAt   DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  ortomat Ortomat? @relation(fields: [ortomatId], references: [id], onDelete: SetNull)

  @@index([type])
  @@index([category])
  @@index([severity])
  @@index([createdAt])
  @@index([ortomatId])
  @@map("activity_logs")
}

// ✅ НОВА ТАБЛИЦЯ для email логів
model EmailLog {
  id        String      @id @default(uuid())
  userId    String?
  email     String
  type      EmailType
  subject   String
  status    EmailStatus @default(PENDING)
  error     String?     @db.Text
  sentAt    DateTime    @default(now())
  deliveredAt DateTime?
  openedAt    DateTime?
  
  metadata  Json?
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([email])
  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@map("email_logs")
}
