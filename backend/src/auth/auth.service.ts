import { Injectable, UnauthorizedException, BadRequestException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcryptjs';
import { UsersService } from '../users/users.service';
import { EmailService } from '../email/email.service';
import { RegisterDto } from './dto/register.dto';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private emailService: EmailService, // ‚úÖ –î–û–î–ê–ù–û
  ) {}

  async validateUser(email: string, password: string): Promise<any> {
    console.log('üîç Validating user:', email);

    const user = await this.usersService.findByEmail(email);

    if (!user) {
      console.log('‚ùå User not found');
      throw new UnauthorizedException('Invalid credentials');
    }

    // ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó email
    if (!user.isVerified) {
      console.log('‚ùå Email not verified');
      throw new UnauthorizedException('Please verify your email first');
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      console.log('‚ùå Invalid password');
      throw new UnauthorizedException('Invalid credentials');
    }

    console.log('‚úÖ User validated:', user.email);

    const { password: _, ...result } = user;
    return result;
  }

  async login(user: any) {
    console.log('üîê Generating token for:', user.email);
    console.log('üë§ User role from DB:', user.role);

    const payload = {
      email: user.email,
      sub: user.id,
      role: user.role,
    };

    const access_token = this.jwtService.sign(payload);

    console.log('‚úÖ Login successful:', user.email, 'Role:', user.role);

    return {
      access_token,
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
        firstName: user.firstName,
        lastName: user.lastName,
        isVerified: user.isVerified,
      },
    };
  }

  /**
   * ‚úÖ –û–ù–û–í–õ–ï–ù–û: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ª—ñ–∫–∞—Ä—ñ–≤
   */
  async register(registerDto: RegisterDto) {
    console.log('üìù Registering new doctor:', registerDto.email);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ email –Ω–µ –∑–∞–π–Ω—è—Ç–∏–π
    const existingUser = await this.usersService.findByEmail(registerDto.email);
    if (existingUser) {
      throw new BadRequestException('Email already registered');
    }

    const hashedPassword = await bcrypt.hash(registerDto.password, 10);

    // ‚úÖ –ó–ú–Ü–ù–ï–ù–û: –ó–∞–≤–∂–¥–∏ —Ä–æ–ª—å DOCTOR
    const user = await this.usersService.create({
      ...registerDto,
      password: hashedPassword,
      role: 'DOCTOR', // –§—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ä–æ–ª—å
      isVerified: false, // Email –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
    });

    console.log('‚úÖ Doctor registered:', user.email);

    // ‚úÖ –î–û–î–ê–ù–û: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    await this.emailService.sendVerificationEmail(
      user.id,
      user.email,
      user.firstName,
    );

    return {
      message: 'Registration successful. Please check your email to verify your account.',
      userId: user.id,
      email: user.email,
    };
  }

  /**
   * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è email
   */
  async verifyEmail(token: string) {
    console.log('‚úâÔ∏è Verifying email with token:', token);

    try {
      const result = await this.emailService.verifyEmailToken(token);
      console.log('‚úÖ Email verified:', result.email);
      return result;
    } catch (error) {
      console.log('‚ùå Email verification failed:', error.message);
      throw new BadRequestException(error.message);
    }
  }

  /**
   * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async forgotPassword(email: string) {
    console.log('üîë Password reset requested for:', email);

    const user = await this.usersService.findByEmail(email);

    if (!user) {
      // ‚ö†Ô∏è –ù–µ —Ä–æ–∑–∫—Ä–∏–≤–∞—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
      return {
        message: 'If this email exists, you will receive a password reset link',
      };
    }

    await this.emailService.sendPasswordResetEmail(
      user.id,
      user.email,
      user.firstName,
    );

    console.log('‚úÖ Password reset email sent to:', email);

    return {
      message: 'If this email exists, you will receive a password reset link',
    };
  }

  /**
   * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async resetPassword(token: string, newPassword: string) {
    console.log('üîê Resetting password with token');

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
      const { userId } = await this.emailService.verifyResetToken(token);

      // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
      const hashedPassword = await bcrypt.hash(newPassword, 10);

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å
      await this.emailService.resetPassword(token, hashedPassword);

      console.log('‚úÖ Password reset successful for user:', userId);

      return {
        message: 'Password successfully reset. You can now login with your new password.',
      };
    } catch (error) {
      console.log('‚ùå Password reset failed:', error.message);
      throw new BadRequestException(error.message);
    }
  }

  /**
   * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  async resendVerificationEmail(email: string) {
    console.log('üìß Resending verification email to:', email);

    const user = await this.usersService.findByEmail(email);

    if (!user) {
      throw new BadRequestException('User not found');
    }

    if (user.isVerified) {
      throw new BadRequestException('Email already verified');
    }

    await this.emailService.sendVerificationEmail(
      user.id,
      user.email,
      user.firstName,
    );

    console.log('‚úÖ Verification email resent to:', email);

    return {
      message: 'Verification email sent. Please check your inbox.',
    };
  }
}