import { Injectable, UnauthorizedException, BadRequestException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcryptjs';
import { UsersService } from '../users/users.service';
import { EmailService } from '../email/email.service';
import { InviteService } from '../invite/invite.service';
import { RegisterDto } from './dto/register.dto';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private emailService: EmailService,
    private inviteService: InviteService,
  ) {}

  async validateUser(email: string, password: string): Promise<any> {
    console.log('üîç Validating user:', email);
    console.log('üîë Password from request:', password);

    const user = await this.usersService.findByEmail(email);

    if (!user) {
      console.log('‚ùå User not found');
      throw new UnauthorizedException('Invalid credentials');
    }

    console.log('üíæ Stored password hash:', user.password);
    console.log('üîê Comparing passwords...');

    const isPasswordValid = await bcrypt.compare(password, user.password);

    console.log('‚úÖ Password valid?', isPasswordValid);

    if (!isPasswordValid) {
      console.log('‚ùå Invalid password - bcrypt comparison failed');
      throw new UnauthorizedException('Invalid credentials');
    }

    console.log('‚úÖ User validated successfully:', user.email);

    const { password: _, ...result } = user;
    return result;
  }

  async login(user: any) {
    console.log('üîê Generating token for:', user.email);
    console.log('üë§ User role from DB:', user.role);

    const payload = {
      email: user.email,
      sub: user.id,
      role: user.role,
    };

    const access_token = this.jwtService.sign(payload);

    console.log('‚úÖ Login successful:', user.email, 'Role:', user.role);

    return {
      access_token,
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
        firstName: user.firstName,
        lastName: user.lastName,
        isVerified: user.isVerified,
      },
    };
  }

  /**
   * –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ª—ñ–∫–∞—Ä—è (–∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —á–µ—Ä–µ–∑ invite)
   */
  async register(registerDto: RegisterDto & { inviteToken?: string }) {
    console.log('üìù Registering new doctor:', registerDto.email);
    console.log('üîë Password from request:', registerDto.password);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ invite —Ç–æ–∫–µ–Ω—É —è–∫—â–æ —î
    if (registerDto.inviteToken) {
      console.log('üé´ Validating invite token:', registerDto.inviteToken);
      const inviteValidation = await this.inviteService.validateInvite(registerDto.inviteToken);
      
      if (!inviteValidation.valid) {
        throw new BadRequestException('Invalid or expired invite link');
      }
      
      console.log('‚úÖ Invite valid for ortomat:', inviteValidation.ortomatName);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ email –Ω–µ –∑–∞–π–Ω—è—Ç–∏–π
    const existingUser = await this.usersService.findByEmail(registerDto.email);
    if (existingUser) {
      console.log('‚ùå Email already registered');
      throw new BadRequestException('Email already registered');
    }

    // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
    console.log('üîê Hashing password with bcrypt (10 rounds)...');
    const hashedPassword = await bcrypt.hash(registerDto.password, 10);
    console.log('üíæ Hashed password generated:', hashedPassword);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await this.usersService.create({
      email: registerDto.email,
      password: hashedPassword,
      role: 'DOCTOR',
      firstName: registerDto.firstName,
      lastName: registerDto.lastName,
      middleName: registerDto.middleName || null,
      phone: registerDto.phone,
      isVerified: false,
    });

    console.log('‚úÖ Doctor registered successfully:', user.email);

    // –Ø–∫—â–æ —î invite —Ç–æ–∫–µ–Ω - –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ –æ—Ä—Ç–æ–º–∞—Ç–∞
    if (registerDto.inviteToken) {
      try {
        await this.inviteService.useInvite(registerDto.inviteToken, user.id);
        console.log('‚úÖ Doctor assigned to ortomat via invite');
      } catch (error) {
        console.error('‚ùå Failed to use invite:', error.message);
        // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, –ª—ñ–∫–∞—Ä –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
      }
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    try {
      await this.emailService.sendVerificationEmail(
        user.id,
        user.email,
        user.firstName,
      );
      console.log('‚úÖ Verification email sent to:', user.email);
    } catch (error) {
      console.error('‚ùå Email sending failed:', error);
      throw error;
    }

    return {
      message: registerDto.inviteToken 
        ? 'Registration successful. You have been assigned to an ortomat. Please check your email to verify your account.'
        : 'Registration successful. Please check your email to verify your account.',
      userId: user.id,
      email: user.email,
    };
  }

  /**
   * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è email
   */
  async verifyEmail(token: string) {
    console.log('‚úâÔ∏è Verifying email with token:', token);

    try {
      const result = await this.emailService.verifyEmailToken(token);
      console.log('‚úÖ Email verified:', result.email);
      return result;
    } catch (error) {
      console.log('‚ùå Email verification failed:', error.message);
      throw new BadRequestException(error.message);
    }
  }

  /**
   * –ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async forgotPassword(email: string) {
    console.log('üîë Password reset requested for:', email);

    const user = await this.usersService.findByEmail(email);

    if (!user) {
      console.log('‚ö†Ô∏è User not found, but returning success message');
      return {
        message: 'If this email exists, you will receive a password reset link',
      };
    }

    try {
      await this.emailService.sendPasswordResetEmail(
        user.id,
        user.email,
        user.firstName,
      );
      console.log('‚úÖ Password reset email sent to:', email);
    } catch (error) {
      console.error('‚ùå Email sending failed:', error.message);
    }

    return {
      message: 'If this email exists, you will receive a password reset link',
    };
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async resetPassword(token: string, newPassword: string) {
    console.log('üîê Resetting password with token');

    try {
      const { userId } = await this.emailService.verifyResetToken(token);
      const hashedPassword = await bcrypt.hash(newPassword, 10);
      console.log('üíæ New hashed password generated');

      await this.emailService.resetPassword(token, hashedPassword);

      console.log('‚úÖ Password reset successful for user:', userId);

      return {
        message: 'Password successfully reset. You can now login with your new password.',
      };
    } catch (error) {
      console.log('‚ùå Password reset failed:', error.message);
      throw new BadRequestException(error.message);
    }
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  async resendVerificationEmail(email: string) {
    console.log('üìß Resending verification email to:', email);

    const user = await this.usersService.findByEmail(email);

    if (!user) {
      console.log('‚ùå User not found');
      throw new BadRequestException('User not found');
    }

    if (user.isVerified) {
      console.log('‚ö†Ô∏è Email already verified');
      throw new BadRequestException('Email already verified');
    }

    try {
      await this.emailService.sendVerificationEmail(
        user.id,
        user.email,
        user.firstName,
      );
      console.log('‚úÖ Verification email resent to:', email);
    } catch (error) {
      console.error('‚ùå Email sending failed:', error.message);
      throw new BadRequestException('Failed to send verification email');
    }

    return {
      message: 'Verification email sent. Please check your inbox.',
    };
  }
}
