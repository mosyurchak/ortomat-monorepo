import { Injectable, Logger } from '@nestjs/common';
import { MailerService } from '@nestjs-modules/mailer';
import { PrismaService } from '../prisma/prisma.service';
import { v4 as uuidv4 } from 'uuid';

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);

  constructor(
    private mailerService: MailerService,
    private prisma: PrismaService,
  ) {}

  /**
   * üìß –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è email –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  async sendVerificationEmail(userId: string, email: string, firstName: string) {
    try {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω
      const token = uuidv4();
      const expires = new Date();
      expires.setHours(expires.getHours() + 24); // –¢–æ–∫–µ–Ω –¥—ñ—î 24 –≥–æ–¥–∏–Ω–∏

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ –ë–î
      await this.prisma.user.update({
        where: { id: userId },
        data: {
          emailVerificationToken: token,
          emailVerificationExpires: expires,
        },
      });

      const verificationUrl = `${process.env.FRONTEND_URL}/auth/verify-email?token=${token}`;

      await this.mailerService.sendMail({
        to: email,
        subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à email - –û—Ä—Ç–æ–º–∞—Ç',
        template: 'verify-email',
        context: {
          firstName,
          verificationUrl,
          expiresIn: '24 –≥–æ–¥–∏–Ω–∏',
        },
      });

      // –õ–æ–≥—É—î–º–æ –≤ –ë–î
      await this.logEmail(userId, email, 'VERIFICATION', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email', 'SENT');

      this.logger.log(`‚úÖ Verification email sent to ${email}`);
      return { success: true };
    } catch (error) {
      this.logger.error(`‚ùå Failed to send verification email to ${email}:`, error);
      await this.logEmail(userId, email, 'VERIFICATION', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email', 'FAILED', error.message);
      throw error;
    }
  }

  /**
   * üéâ –í—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç –ø—ñ—Å–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  async sendWelcomeEmail(userId: string, email: string, firstName: string, role: string) {
    try {
      const dashboardUrl = 
        role === 'DOCTOR' ? `${process.env.FRONTEND_URL}/doctor` :
        role === 'COURIER' ? `${process.env.FRONTEND_URL}/courier` :
        `${process.env.FRONTEND_URL}/dashboard`;

      await this.mailerService.sendMail({
        to: email,
        subject: '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –û—Ä—Ç–æ–º–∞—Ç!',
        template: 'welcome',
        context: {
          firstName,
          role: role === 'DOCTOR' ? '–õ—ñ–∫–∞—Ä' : '–ö—É—Ä\'—î—Ä',
          dashboardUrl,
        },
      });

      await this.logEmail(userId, email, 'WELCOME', '–í—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç', 'SENT');

      this.logger.log(`‚úÖ Welcome email sent to ${email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send welcome email to ${email}:`, error);
      await this.logEmail(userId, email, 'WELCOME', '–í—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç', 'FAILED', error.message);
    }
  }

  /**
   * üîë –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async sendPasswordResetEmail(userId: string, email: string, firstName: string) {
    try {
      const token = uuidv4();
      const expires = new Date();
      expires.setHours(expires.getHours() + 1); // –¢–æ–∫–µ–Ω –¥—ñ—î 1 –≥–æ–¥–∏–Ω—É

      await this.prisma.user.update({
        where: { id: userId },
        data: {
          resetPasswordToken: token,
          resetPasswordExpires: expires,
        },
      });

      const resetUrl = `${process.env.FRONTEND_URL}/auth/reset-password?token=${token}`;

      await this.mailerService.sendMail({
        to: email,
        subject: '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é - –û—Ä—Ç–æ–º–∞—Ç',
        template: 'reset-password',
        context: {
          firstName,
          resetUrl,
          expiresIn: '1 –≥–æ–¥–∏–Ω–∞',
        },
      });

      await this.logEmail(userId, email, 'PASSWORD_RESET', '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é', 'SENT');

      this.logger.log(`‚úÖ Password reset email sent to ${email}`);
      return { success: true };
    } catch (error) {
      this.logger.error(`‚ùå Failed to send password reset email to ${email}:`, error);
      await this.logEmail(userId, email, 'PASSWORD_RESET', '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é', 'FAILED', error.message);
      throw error;
    }
  }

  /**
   * üí∞ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª—ñ–∫–∞—Ä—é –ø—Ä–æ –ø—Ä–æ–¥–∞–∂
   */
  async sendSaleNotification(
    doctorId: string,
    saleData: {
      productName: string;
      amount: number;
      commission: number;
      ortomatName: string;
      saleId: string;
    },
  ) {
    try {
      const doctor = await this.prisma.user.findUnique({
        where: { id: doctorId },
        select: {
          email: true,
          firstName: true,
          emailNotifications: true,
        },
      });

      if (!doctor || !doctor.emailNotifications) {
        this.logger.log(`‚è≠Ô∏è Skipping sale notification for doctor ${doctorId} (notifications disabled)`);
        return;
      }

      const statsUrl = `${process.env.FRONTEND_URL}/doctor/statistics`;

      await this.mailerService.sendMail({
        to: doctor.email,
        subject: 'üí∞ –ù–æ–≤–∞ –∫–æ–º—ñ—Å—ñ—è –≤—ñ–¥ –ø—Ä–æ–¥–∞–∂—É!',
        template: 'sale-notification',
        context: {
          firstName: doctor.firstName,
          productName: saleData.productName,
          amount: saleData.amount.toFixed(2),
          commission: saleData.commission.toFixed(2),
          ortomatName: saleData.ortomatName,
          statsUrl,
        },
      });

      await this.logEmail(doctorId, doctor.email, 'SALE_NOTIFICATION', '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–¥–∞–∂', 'SENT');

      // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      await this.prisma.user.update({
        where: { id: doctorId },
        data: { lastNotificationSent: new Date() },
      });

      this.logger.log(`‚úÖ Sale notification sent to doctor ${doctor.email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send sale notification:`, error);
    }
  }

  /**
   * üì¶ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫—É—Ä'—î—Ä—É –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
   */
  async sendRefillReminder(
    courierId: string,
    ortomatsData: Array<{
      ortomatName: string;
      emptyCells: number;
      lowStockCells: number;
    }>,
  ) {
    try {
      const courier = await this.prisma.user.findUnique({
        where: { id: courierId },
        select: {
          email: true,
          firstName: true,
          emailNotifications: true,
        },
      });

      if (!courier || !courier.emailNotifications) {
        this.logger.log(`‚è≠Ô∏è Skipping refill reminder for courier ${courierId} (notifications disabled)`);
        return;
      }

      const refillUrl = `${process.env.FRONTEND_URL}/courier/refill`;

      await this.mailerService.sendMail({
        to: courier.email,
        subject: 'üì¶ –ù–µ–æ–±—Ö—ñ–¥–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –æ—Ä—Ç–æ–º–∞—Ç—ñ–≤',
        template: 'refill-reminder',
        context: {
          firstName: courier.firstName,
          ortomats: ortomatsData,
          totalOrtomats: ortomatsData.length,
          refillUrl,
        },
      });

      await this.logEmail(courierId, courier.email, 'REFILL_REMINDER', '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è', 'SENT');

      await this.prisma.user.update({
        where: { id: courierId },
        data: { lastNotificationSent: new Date() },
      });

      this.logger.log(`‚úÖ Refill reminder sent to courier ${courier.email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send refill reminder:`, error);
    }
  }

  /**
   * üìä –õ–æ–≥—É–≤–∞–Ω–Ω—è email –≤ –ë–î
   */
  private async logEmail(
    userId: string | null,
    email: string,
    type: any,
    subject: string,
    status: any,
    error?: string,
  ) {
    try {
      await this.prisma.emailLog.create({
        data: {
          userId,
          email,
          type,
          subject,
          status,
          error,
        },
      });
    } catch (err) {
      this.logger.error('Failed to log email:', err);
    }
  }

  /**
   * ‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
   */
  async verifyEmailToken(token: string) {
    const user = await this.prisma.user.findFirst({
      where: {
        emailVerificationToken: token,
        emailVerificationExpires: {
          gt: new Date(),
        },
      },
    });

    if (!user) {
      throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω');
    }

    await this.prisma.user.update({
      where: { id: user.id },
      data: {
        isVerified: true,
        emailVerificationToken: null,
        emailVerificationExpires: null,
      },
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç
    await this.sendWelcomeEmail(user.id, user.email, user.firstName, user.role);

    return { success: true, email: user.email };
  }

  /**
   * üîë –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async verifyResetToken(token: string) {
    const user = await this.prisma.user.findFirst({
      where: {
        resetPasswordToken: token,
        resetPasswordExpires: {
          gt: new Date(),
        },
      },
    });

    if (!user) {
      throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω');
    }

    return { userId: user.id, email: user.email };
  }

  /**
   * üîê –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è
   */
  async resetPassword(token: string, newPassword: string) {
    const user = await this.verifyResetToken(token);

    await this.prisma.user.update({
      where: { id: user.userId },
      data: {
        password: newPassword, // –ú–∞—î –±—É—Ç–∏ –∑–∞—Ö–µ—à–æ–≤–∞–Ω–æ –≤ auth.service
        resetPasswordToken: null,
        resetPasswordExpires: null,
      },
    });

    return { success: true };
  }
}
