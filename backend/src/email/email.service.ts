import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import sgMail from '@sendgrid/mail';
import { readFileSync } from 'fs';
import { join } from 'path';
import * as Handlebars from 'handlebars';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);

  constructor(
    private prisma: PrismaService,
    private configService: ConfigService,
  ) {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ SendGrid
    const apiKey = process.env.SENDGRID_API_KEY;
    if (apiKey) {
      sgMail.setApiKey(apiKey);
      this.logger.log('‚úÖ SendGrid initialized');
    } else {
      this.logger.warn('‚ö†Ô∏è SENDGRID_API_KEY not set');
    }
  }

  /**
   * –ö–æ–º–ø—ñ–ª—é—î Handlebars —à–∞–±–ª–æ–Ω
   */
  private compileTemplate(templateName: string, data: any): string {
    try {
      const templatePath = join(__dirname, 'templates', `${templateName}.hbs`);
      const templateContent = readFileSync(templatePath, 'utf-8');
      const template = Handlebars.compile(templateContent);
      return template(data);
    } catch (error) {
      this.logger.warn(`Template ${templateName} not found, using default HTML`);
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤–∏–π HTML —è–∫—â–æ —à–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
      return this.getDefaultHtml(templateName, data);
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î email —á–µ—Ä–µ–∑ SendGrid API
   */
  private async sendEmail(to: string, subject: string, html: string): Promise<void> {
    const msg = {
      to,
      from: process.env.SMTP_FROM || 'noreply@ortomat.com.ua',
      subject,
      html,
    };

    try {
      await sgMail.send(msg);
      this.logger.log(`‚úÖ Email sent to ${to}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send email to ${to}:`, error.response?.body || error.message);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  async sendVerificationEmail(
    userId: string,
    email: string,
    firstName: string,
  ): Promise<void> {
    this.logger.log(`üìß Sending verification email to ${email}`);

    try {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω
      const token = this.generateToken();
      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 –≥–æ–¥–∏–Ω–∏

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ –ë–î
      await this.prisma.user.update({
        where: { id: userId },
        data: {
          emailVerificationToken: token,
          emailVerificationExpires: expiresAt,
        },
      });

      const verificationUrl = `${process.env.FRONTEND_URL}/verify-email?token=${token}`;

      // –ö–æ–º–ø—ñ–ª—é—î–º–æ —à–∞–±–ª–æ–Ω
      const html = this.compileTemplate('verify-email', {
        firstName,
        verificationUrl,
        year: new Date().getFullYear(),
      });

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
      await this.sendEmail(
        email,
        '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à email - –û—Ä—Ç–æ–º–∞—Ç',
        html,
      );

      this.logger.log(`‚úÖ Verification email sent to ${email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send verification email to ${email}:`, error);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ welcome email –ø—ñ—Å–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  async sendWelcomeEmail(
    userId: string,
    email: string,
    firstName: string,
  ): Promise<void> {
    this.logger.log(`üìß Sending welcome email to ${email}`);

    try {
      const html = this.compileTemplate('welcome', {
        firstName,
        dashboardUrl: `${process.env.FRONTEND_URL}/doctor`,
        year: new Date().getFullYear(),
      });

      await this.sendEmail(
        email,
        '–í—ñ—Ç–∞—î–º–æ –≤ –û—Ä—Ç–æ–º–∞—Ç! üéâ',
        html,
      );

      this.logger.log(`‚úÖ Welcome email sent to ${email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send welcome email to ${email}:`, error);
      // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, –±–æ welcome email –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∏–π
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async sendPasswordResetEmail(
    userId: string,
    email: string,
    firstName: string,
  ): Promise<void> {
    this.logger.log(`üìß Sending password reset email to ${email}`);

    try {
      const token = this.generateToken();
      const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 –≥–æ–¥–∏–Ω–∞

      await this.prisma.user.update({
        where: { id: userId },
        data: {
          resetPasswordToken: token,
          resetPasswordExpires: expiresAt,
        },
      });

      const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${token}`;

      const html = this.compileTemplate('reset-password', {
        firstName,
        resetUrl,
        year: new Date().getFullYear(),
      });

      await this.sendEmail(
        email,
        '–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é - –û—Ä—Ç–æ–º–∞—Ç',
        html,
      );

      this.logger.log(`‚úÖ Password reset email sent to ${email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send password reset email to ${email}:`, error);
      throw error;
    }
  }

  /**
   * –ù–û–í–ò–ô –ú–ï–¢–û–î: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é –ª—ñ–∫–∞—Ä—é
   */
  async sendCommissionNotification(
    email: string,
    data: {
      firstName: string;
      commission: number;
      saleAmount: number;
      orderId: string;
    },
  ): Promise<void> {
    this.logger.log(`üí∞ Sending commission notification to ${email}`);

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>–ù–æ–≤–∞ –∫–æ–º—ñ—Å—ñ—è</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
          }
          .header {
            background: #4CAF50;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
          }
          .content {
            background: #f9f9f9;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 0 0 5px 5px;
          }
          .amount {
            font-size: 24px;
            color: #4CAF50;
            font-weight: bold;
          }
          .button {
            background: #4CAF50;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            display: inline-block;
            margin-top: 20px;
          }
          .footer {
            margin-top: 20px;
            text-align: center;
            color: #666;
            font-size: 12px;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üí∞ –ù–æ–≤–∞ –∫–æ–º—ñ—Å—ñ—è –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞!</h1>
        </div>
        <div class="content">
          <p>–®–∞–Ω–æ–≤–Ω–∏–π(–∞) ${data.firstName},</p>
          <p>–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –ø—Ä–æ–¥–∞–∂ —á–µ—Ä–µ–∑ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å—Å–∏–ª–∫—É.</p>
          
          <table style="width: 100%; margin: 20px 0;">
            <tr>
              <td><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong></td>
              <td>${data.orderId}</td>
            </tr>
            <tr>
              <td><strong>–°—É–º–∞ –ø—Ä–æ–¥–∞–∂—É:</strong></td>
              <td>${data.saleAmount} ‚Ç¥</td>
            </tr>
            <tr>
              <td><strong>–í–∞—à–∞ –∫–æ–º—ñ—Å—ñ—è (10%):</strong></td>
              <td class="amount">${data.commission} ‚Ç¥</td>
            </tr>
          </table>
          
          <p>–ö–æ–º—ñ—Å—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏ –∑–≥—ñ–¥–Ω–æ –∑ —É–º–æ–≤–∞–º–∏ –¥–æ–≥–æ–≤–æ—Ä—É.</p>
          
          <a href="${this.configService.get('FRONTEND_URL')}/doctor/earnings" class="button">
            –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –¥–æ—Ö–æ–¥–∏
          </a>
        </div>
        <div class="footer">
          <p>¬© 2024 Ortomat. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.</p>
          <p>–¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —Ü–µ–π –ª–∏—Å—Ç.</p>
        </div>
      </body>
      </html>
    `;

    try {
      await this.sendEmail(
        email,
        `–ù–æ–≤–∞ –∫–æ–º—ñ—Å—ñ—è: ${data.commission} ‚Ç¥`,
        html,
      );

      // –õ–æ–≥—É—î–º–æ –≤ –±–∞–∑—É
      await this.prisma.emailLog.create({
        data: {
          email,
          type: 'SALE_NOTIFICATION',
          subject: `–ù–æ–≤–∞ –∫–æ–º—ñ—Å—ñ—è: ${data.commission} ‚Ç¥`,
          status: 'SENT',
          metadata: data,
        },
      });

      this.logger.log(`‚úÖ Commission notification sent to ${email}`);
    } catch (error) {
      this.logger.error('Error sending commission notification:', error);
      // –ù–µ –±–ª–æ–∫—É—î–º–æ –ø—Ä–æ—Ü–µ—Å —è–∫—â–æ email –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—Å—è
    }
  }

  /**
   * –ù–û–í–ò–ô –ú–ï–¢–û–î: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–∫—É–ø—Ü—é
   */
  async sendPurchaseConfirmation(
    email: string,
    data: {
      orderId: string;
      amount: number;
      productName?: string;
      ortomatAddress?: string;
      cellNumber?: number;
    },
  ): Promise<void> {
    this.logger.log(`üõí Sending purchase confirmation to ${email}`);

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
          }
          .header {
            background: #2196F3;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
          }
          .content {
            background: #f9f9f9;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 0 0 5px 5px;
          }
          .order-box {
            background: white;
            padding: 15px;
            border: 2px solid #2196F3;
            border-radius: 5px;
            margin: 20px 0;
          }
          .button {
            background: #2196F3;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            display: inline-block;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h1>
        </div>
        <div class="content">
          <p>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ!</p>
          
          <div class="order-box">
            <h3>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
            <p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${data.orderId}</p>
            <p><strong>–°—É–º–∞:</strong> ${data.amount} ‚Ç¥</p>
            ${data.productName ? `<p><strong>–¢–æ–≤–∞—Ä:</strong> ${data.productName}</p>` : ''}
          </div>
          
          ${data.ortomatAddress ? `
          <div class="order-box">
            <h3>üìç –î–µ –∑–∞–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä:</h3>
            <p><strong>–ê–¥—Ä–µ—Å–∞ –æ—Ä—Ç–æ–º–∞—Ç—É:</strong> ${data.ortomatAddress}</p>
            ${data.cellNumber ? `<p><strong>–ù–æ–º–µ—Ä –∫–æ–º—ñ—Ä–∫–∏:</strong> ${data.cellNumber}</p>` : ''}
            <p style="color: #666; font-size: 14px;">
              –¢–æ–≤–∞—Ä –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.
            </p>
          </div>
          ` : ''}
          
          <p style="text-align: center; margin-top: 30px;">
            <a href="${this.configService.get('FRONTEND_URL')}/orders/${data.orderId}" class="button">
              –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            </a>
          </p>
          
          <p style="color: #666; font-size: 14px; margin-top: 20px;">
            –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: 
            <strong>+38 (050) 123-45-67</strong>
          </p>
        </div>
      </body>
      </html>
    `;

    try {
      await this.sendEmail(
        email,
        `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${data.orderId} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ`,
        html,
      );

      // –õ–æ–≥—É—î–º–æ –≤ –±–∞–∑—É
      await this.prisma.emailLog.create({
        data: {
          email,
          type: 'SALE_NOTIFICATION',
          subject: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${data.orderId} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ`,
          status: 'SENT',
          metadata: data,
        },
      });

      this.logger.log(`‚úÖ Purchase confirmation sent to ${email}`);
    } catch (error) {
      this.logger.error('Error sending purchase confirmation:', error);
      // –ù–µ –±–ª–æ–∫—É—î–º–æ –ø—Ä–æ—Ü–µ—Å —è–∫—â–æ email –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—Å—è
    }
  }

  /**
   * –ù–û–í–ò–ô –ú–ï–¢–û–î: –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –ø—Ä–æ–¥–∞–∂
   */
  async sendSaleNotification(
    email: string,
    data: any
  ): Promise<void> {
    // –Ø–∫—â–æ —Ü–µ –∫–æ–º—ñ—Å—ñ—è –¥–ª—è –ª—ñ–∫–∞—Ä—è
    if (data.commission !== undefined) {
      return this.sendCommissionNotification(email, data);
    }
    
    // –Ø–∫—â–æ —Ü–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø—Ü—è
    if (data.orderId && data.amount) {
      return this.sendPurchaseConfirmation(email, data);
    }

    // –Ø–∫—â–æ —Ç–∏–ø –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ - –ª–æ–≥—É—î–º–æ
    this.logger.warn(`Unknown sale notification type for ${email}`, data);
  }

  /**
   * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è email —Ç–æ–∫–µ–Ω—É
   */
  async verifyEmailToken(token: string): Promise<{ userId: string; email: string }> {
    const user = await this.prisma.user.findFirst({
      where: {
        emailVerificationToken: token,
        emailVerificationExpires: {
          gte: new Date(),
        },
      },
    });

    if (!user) {
      throw new Error('Invalid or expired verification token');
    }

    await this.prisma.user.update({
      where: { id: user.id },
      data: {
        isVerified: true,
        emailVerificationToken: null,
        emailVerificationExpires: null,
      },
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ welcome email
    await this.sendWelcomeEmail(user.id, user.email, user.firstName);

    return { userId: user.id, email: user.email };
  }

  /**
   * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async verifyResetToken(token: string): Promise<{ userId: string }> {
    const user = await this.prisma.user.findFirst({
      where: {
        resetPasswordToken: token,
        resetPasswordExpires: {
          gte: new Date(),
        },
      },
    });

    if (!user) {
      throw new Error('Invalid or expired reset token');
    }

    return { userId: user.id };
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async resetPassword(token: string, newPassword: string): Promise<void> {
    const user = await this.prisma.user.findFirst({
      where: {
        resetPasswordToken: token,
        resetPasswordExpires: {
          gte: new Date(),
        },
      },
    });

    if (!user) {
      throw new Error('Invalid or expired reset token');
    }

    await this.prisma.user.update({
      where: { id: user.id },
      data: {
        password: newPassword,
        resetPasswordToken: null,
        resetPasswordExpires: null,
      },
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω—É
   */
  private generateToken(): string {
    return require('crypto').randomBytes(32).toString('hex');
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω–∏–π HTML —è–∫—â–æ —à–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
   */
  private getDefaultHtml(templateName: string, data: any): string {
    switch (templateName) {
      case 'verify-email':
        return `
          <h1>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à email</h1>
          <p>–ü—Ä–∏–≤—ñ—Ç ${data.firstName},</p>
          <p>–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—É email –∞–¥—Ä–µ—Å—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ:</p>
          <p><a href="${data.verificationUrl}">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ email</a></p>
        `;
      case 'welcome':
        return `
          <h1>–í—ñ—Ç–∞—î–º–æ –≤ –û—Ä—Ç–æ–º–∞—Ç!</h1>
          <p>–ü—Ä–∏–≤—ñ—Ç ${data.firstName},</p>
          <p>–í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</p>
          <p><a href="${data.dashboardUrl}">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–±—ñ–Ω–µ—Ç—É</a></p>
        `;
      case 'reset-password':
        return `
          <h1>–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é</h1>
          <p>–ü—Ä–∏–≤—ñ—Ç ${data.firstName},</p>
          <p>–î–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ:</p>
          <p><a href="${data.resetUrl}">–°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å</a></p>
        `;
      default:
        return '<p>Email content</p>';
    }
  }
}