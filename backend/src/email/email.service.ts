import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import sgMail from '@sendgrid/mail';
import { readFileSync } from 'fs';
import { join } from 'path';
import * as Handlebars from 'handlebars';

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);

  constructor(private prisma: PrismaService) {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ SendGrid
    const apiKey = process.env.SENDGRID_API_KEY;
    if (apiKey) {
      sgMail.setApiKey(apiKey);
      this.logger.log('‚úÖ SendGrid initialized');
    } else {
      this.logger.warn('‚ö†Ô∏è SENDGRID_API_KEY not set');
    }
  }

  /**
   * –ö–æ–º–ø—ñ–ª—é—î Handlebars —à–∞–±–ª–æ–Ω
   */
  private compileTemplate(templateName: string, data: any): string {
    const templatePath = join(__dirname, 'templates', `${templateName}.hbs`);
    const templateContent = readFileSync(templatePath, 'utf-8');
    const template = Handlebars.compile(templateContent);
    return template(data);
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î email —á–µ—Ä–µ–∑ SendGrid API
   */
  private async sendEmail(to: string, subject: string, html: string): Promise<void> {
    const msg = {
      to,
      from: process.env.SMTP_FROM || 'noreply@ortomat.com.ua',
      subject,
      html,
    };

    try {
      await sgMail.send(msg);
      this.logger.log(`‚úÖ Email sent to ${to}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send email to ${to}:`, error.response?.body || error.message);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  async sendVerificationEmail(
    userId: string,
    email: string,
    firstName: string,
  ): Promise<void> {
    this.logger.log(`üìß Sending verification email to ${email}`);

    try {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω
      const token = this.generateToken();
      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 –≥–æ–¥–∏–Ω–∏

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ –ë–î
      await this.prisma.user.update({
        where: { id: userId },
        data: {
          emailVerificationToken: token,
          emailVerificationExpires: expiresAt,
        },
      });

      // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–±—Ä–∞–Ω–æ /auth/
      const verificationUrl = `${process.env.FRONTEND_URL}/verify-email?token=${token}`;

      // –ö–æ–º–ø—ñ–ª—é—î–º–æ —à–∞–±–ª–æ–Ω
      const html = this.compileTemplate('verify-email', {
        firstName,
        verificationUrl,
        year: new Date().getFullYear(),
      });

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
      await this.sendEmail(
        email,
        '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à email - –û—Ä—Ç–æ–º–∞—Ç',
        html,
      );

      this.logger.log(`‚úÖ Verification email sent to ${email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send verification email to ${email}:`, error);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ welcome email –ø—ñ—Å–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  async sendWelcomeEmail(
    userId: string,
    email: string,
    firstName: string,
  ): Promise<void> {
    this.logger.log(`üìß Sending welcome email to ${email}`);

    try {
      const html = this.compileTemplate('welcome', {
        firstName,
        dashboardUrl: `${process.env.FRONTEND_URL}/doctor`,
        year: new Date().getFullYear(),
      });

      await this.sendEmail(
        email,
        '–í—ñ—Ç–∞—î–º–æ –≤ –û—Ä—Ç–æ–º–∞—Ç! üéâ',
        html,
      );

      this.logger.log(`‚úÖ Welcome email sent to ${email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send welcome email to ${email}:`, error);
      // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, –±–æ welcome email –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∏–π
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async sendPasswordResetEmail(
    userId: string,
    email: string,
    firstName: string,
  ): Promise<void> {
    this.logger.log(`üìß Sending password reset email to ${email}`);

    try {
      const token = this.generateToken();
      const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 –≥–æ–¥–∏–Ω–∞

      await this.prisma.user.update({
        where: { id: userId },
        data: {
          resetPasswordToken: token,
          resetPasswordExpires: expiresAt,
        },
      });

      // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–±—Ä–∞–Ω–æ /auth/
      const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${token}`;

      const html = this.compileTemplate('reset-password', {
        firstName,
        resetUrl,
        year: new Date().getFullYear(),
      });

      await this.sendEmail(
        email,
        '–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é - –û—Ä—Ç–æ–º–∞—Ç',
        html,
      );

      this.logger.log(`‚úÖ Password reset email sent to ${email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send password reset email to ${email}:`, error);
      throw error;
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è email —Ç–æ–∫–µ–Ω—É
   */
  async verifyEmailToken(token: string): Promise<{ userId: string; email: string }> {
    const user = await this.prisma.user.findFirst({
      where: {
        emailVerificationToken: token,
        emailVerificationExpires: {
          gte: new Date(),
        },
      },
    });

    if (!user) {
      throw new Error('Invalid or expired verification token');
    }

    await this.prisma.user.update({
      where: { id: user.id },
      data: {
        isVerified: true,
        emailVerificationToken: null,
        emailVerificationExpires: null,
      },
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ welcome email
    await this.sendWelcomeEmail(user.id, user.email, user.firstName);

    return { userId: user.id, email: user.email };
  }

  /**
   * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async verifyResetToken(token: string): Promise<{ userId: string }> {
    const user = await this.prisma.user.findFirst({
      where: {
        resetPasswordToken: token,
        resetPasswordExpires: {
          gte: new Date(),
        },
      },
    });

    if (!user) {
      throw new Error('Invalid or expired reset token');
    }

    return { userId: user.id };
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
   */
  async resetPassword(token: string, newPassword: string): Promise<void> {
    const user = await this.prisma.user.findFirst({
      where: {
        resetPasswordToken: token,
        resetPasswordExpires: {
          gte: new Date(),
        },
      },
    });

    if (!user) {
      throw new Error('Invalid or expired reset token');
    }

    await this.prisma.user.update({
      where: { id: user.id },
      data: {
        password: newPassword,
        resetPasswordToken: null,
        resetPasswordExpires: null,
      },
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω—É
   */
  private generateToken(): string {
    return require('crypto').randomBytes(32).toString('hex');
  }
}
